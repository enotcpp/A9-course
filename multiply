#include <utility>

//+------------------------------------------------------------------+
//| multiply0                                                        |
//+------------------------------------------------------------------+

int multiply0(int n, int a)
{
   if(n == 1) return a;
   
   return multiply0(n - 1, a) + a;
}

//+------------------------------------------------------------------+
//| multiply1                                                        |
//| Египетское умножение.                                            |
//| #+(n) = floor(log(n)) + (hamming(n) - 1)                         |
//| Пример:                                                          |
//| 41 (1 + 8 + 32) * 59                                             |
//| ---------------                                                  |
//| 1    | 59 (+)                                                    |
//| 2    | 118                                                       |
//| 4    | 236                                                       |
//| 8    | 472 (+)                                                   |
//| 16   | 944                                                       |
//| 32   | 1888 (+)                                                  |
//+------------------------------------------------------------------+

int multiply1(int n, int a)
{
   if(n == 1) return a;
   
   int result = multiply1(half(n), a + a);
   
   if(is_odd(n)) result += a;
   
   return result;
} 

//+------------------------------------------------------------------+
//| mult_acc0                                                        |
//+------------------------------------------------------------------+

int mult_acc0(int r, int n, int a)
{
   if(n == 1) return r + a;
   
   if(is_odd(n)) r += a;
   
   return mult_acc0(r, half(n), a + a);
}

//+------------------------------------------------------------------+
//| mult_acc1                                                        |
//+------------------------------------------------------------------+

int mult_acc1(int r, int n, int a)
{
   if(is_odd(n))
   {
      r += a;
      
      if(n == 1) return r;
   }
   
   return mult_acc1(r, half(n), a + a);
}

//+------------------------------------------------------------------+
//| mult_acc2                                                        |
//+------------------------------------------------------------------+

int mult_acc2(int r, int n, int a)
{
   if(is_odd(n))
   {
      r += a;
      
      if(n == 1) return r;
   }
   
   n = half(n);
   
   a = a + a;
   
   return mult_acc2(r, n, a);
}

// Если параметры совпадают с аргументами нового вызова - 
// строгая хвостовая рекурсия.

//+------------------------------------------------------------------+
//| mult_acc3                                                        |
//+------------------------------------------------------------------+

int mult_acc3(int r, int n, int a)
{
   while(true)
   {
      if(is_odd(n))
      {
         r += a;
         
         if(n == 1) return r;
      }
      
      n = half(n);
      
      a = a + a;      
   }
}

//+------------------------------------------------------------------+
//| multiply2                                                        |
//+------------------------------------------------------------------+

int multiply2(int n, int a)
{
   if(n == 1) return a;
   
   return mult_acc3(a, n - 1, a);
}

//+------------------------------------------------------------------+
//| multiply3                                                        |
//+------------------------------------------------------------------+

int multiply3(int n, int a)
{
   while(!is_odd(n))
   {
      a = a + a;
      
      n = half(n); 
   }
   
   if(n == 1) return a;
    
   return mult_acc3(a, n - 1, a);
}

//+------------------------------------------------------------------+
//| multiply4                                                        |
//+------------------------------------------------------------------+

int multiply4(int n, int a)
{
   while(!is_odd(n))
   {
      a = a + a;
      
      n = half(n); 
   }
   
   if(n == 1) return a;
    
   return mult_acc3(a, half(n - 1), a + a);
}

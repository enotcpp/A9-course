#include <utility>

using line_segment = size_t;

//+------------------------------------------------------------------+
//| gcm0                                                             |
//+------------------------------------------------------------------+

line_segment gcm0(line_segment a, line_segment b)
{
    while(a != b)
    {
        if(b < a)
        {
            a = a - b;
        }
        else
        {
            b = b - a;
        }
    }

    return a;
}

//+------------------------------------------------------------------+
//| gcm1                                                             |
//+------------------------------------------------------------------+

line_segment gcm1(line_segment a, line_segment b)
{
    while(a != b)
    {
        // Вычисление остатка -> можно вынести в отдельную функцию.
        while(b < a)
        {
            a = a - b;
        }

        std::swap(a, b);
    }

    return a;
}

//+------------------------------------------------------------------+
//| segment_remainder                                                |
//+------------------------------------------------------------------+

line_segment segment_remainder(line_segment a, line_segment b)
{
    while(b < a)
    {
        a = a - b;    
    }

    return a;
}

//+------------------------------------------------------------------+
//| Если line_segment - луч, то цикл не завершился бы.               |
//| Аксиома Архимеда:                                                |
//| Для любых двух величин a и b существует такое натуральное число  |
//| n, что  a <= nb.                                                 |
//| Означает: не существует бесконечных величин.                     |
//+------------------------------------------------------------------+

//+------------------------------------------------------------------+
//| gcm2                                                             |
//+------------------------------------------------------------------+

line_segment gcm2(line_segment a, line_segment b)
{
    while(a != b)
    {
        a = segment_remainder(a, b);

        std::swap(a, b);
    }

    return a;
}

//+------------------------------------------------------------------+
//| Улучишим segment_remainder подобно египетскому умножению         |
//| увеличивая вдвое одну величину и уменьшая вдвое другую.          |
//| Лемма о рекурсивном остатке:                                     |
//| Если r = segment_remainder(a, 2b), то                            |
//| segment_remainder(a, b) = {r если r<=b | r-b если r >b }         |
//+------------------------------------------------------------------+

//+------------------------------------------------------------------+
//| fast_segment_remainder                                           |
//+------------------------------------------------------------------+

line_segment fast_segment_remainder(line_segment a, line_segment b)
{
    // precondition: b != 0
    if(a < b)
    {
        return a;
    }

    if(a - b < b)
    {
        return a - b;
    }

    a = fast_segment_remainder(a, b + b);

    if(a < b)
    {
        return a;
    }

    return a - b;
}

//+------------------------------------------------------------------+
//| fast_segment_gcm                                                 |
//+------------------------------------------------------------------+

line_segment fast_segment_gcm(line_segment a, line_segment b)
{
    while(a != b)
    {
        a = fast_segment_remainder(a, b);

        std::swap(a, b);
    }

    return a;
}

//+------------------------------------------------------------------+
//| largest_doubling                                                 |
//| Для перехода к итеративной версии - функция кол-ва удвоений,     |
//| возваращем первый результат удвоения b, больший a - b.           |
//+------------------------------------------------------------------+

line_segment largest_doubling(line_segment a, line_segment b)
{
    //precondition: b != 0
    while(a - b >= b)
    {
        b = b + b;
    }

    return b;
}


//+------------------------------------------------------------------+
//| remainder                                                        |
//+------------------------------------------------------------------+

line_segment remainder(line_segment a, line_segment b)
{
    //precondition: b != 0
    if(a < b)
    {
        return a;
    }

    line_segment c = largest_doubling(a, b);

    a = a - c;

    while(c != b)
    {
        c = half(c);
        
        if(c <= a)
        {
            a = a - c;
        }
    }

    return a;
}

//+------------------------------------------------------------------+
//| quotient                                                         |
//+------------------------------------------------------------------+

using integer = size_t;

integer quotient(line_segment a, line_segment b)
{
    //precondition: b > 0
    if(a < b) return integer(0);

    line_segment c = largest_doubling(a, b);

    integer n(1);

    a = a - c;

    while(c != b)
    {
        c = half(c);

        n = n + n;

        if(c <= a)
        {
            a = a - c;

            n = n + 1;
        }
    }

    return n;
}

//+------------------------------------------------------------------+
//| quotient_remainder                                               |
//+------------------------------------------------------------------+

std::pair<integer, line_segment> 
quotient_remainder(line_segment a, line_segment b)
{
    //precondition: b > 0
    if(a < b) return { integer(0), a };

    line_segment c = largest_doubling(a, b);

    integer n(1);

    a = a - c;

    while(c != b)
    {
        c = half(c);

        n = n + n;

        if(c <= a)
        {
            a = a - c;

            n = n + 1;
        }
    }

    return { n, a };    
}

//+------------------------------------------------------------------+
//| Закон полезного возврата                                         |
//| Если можно вернуть результат работы, то это лучше, чем           |
//| потерять его.                                                    |
//+------------------------------------------------------------------+

//+------------------------------------------------------------------+
//| remainder_fibonacci                                              |
//| Роберт Флойд, Дональд Кнут: вместо деление пополам используем    |
//| рекуррентный подход подобный последовательности Фибоначчи.       |
//+------------------------------------------------------------------+

line_segment remainder_fibonacci(line_segment a, line_segment b)
{
    //precondition: b > 0
    if(a < b) return a;

    line_segment c = b;

    do
    {
        line_segment tmp = c;
        c = b + c;
        b = tmp;
    }
    while(a >= c);

    do
    {
        if(a >= b)
        {
            a = a - b;
        }
        
        line_segment tmp = c - b;
        c = b;
        b = tmp;
    }
    while(b < c);

    return a;
}

//+------------------------------------------------------------------+
//| gcm_remainder                                                    |
//+------------------------------------------------------------------+

line_segment gcm_remainder(line_segment a, line_segment b)
{
    while(b != line_segment(0))
    {
        a = remainder(a, b);

        std::swap(a, b);
    }

    return a;
}

//+------------------------------------------------------------------+
//| gcd                                                              |
//+------------------------------------------------------------------+

integer gcd(integer a, integer b)
{
    while(b != integer(0))
    {
        a = a % b;

        std::swap(a, b);
    }
    return a;
}


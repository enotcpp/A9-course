#include <concepts>
#include <utility>

//+------------------------------------------------------------------+
//| Леммы:                                                           |
//+------------------------------------------------------------------+
// - Квадрат наименьшего простого при разложении составного С не
// может быть больше С: MIN(p0, p1,..., pN)^2 <= C
// - Любое состаное С <= p^2 будет отсеяено меньшими p ->
// - mark_sieve для p начинается с p^2
// - просеиваем пока p^2 < m

// Инварианты:
//
// - Проходим только нечетные, начиная с 3, в решете храним флаги, а
// значения множителей вычисляем:
// value(i) = 2*i + 3

// - Разность смежных значений в 2 раза больше разности их индексов:
// index(v) = (v - 3) / 2

// - Шаг между кратными кандидатами == значению множителя.
// step(i) = 2i + 3 
//         = index((k+2)(2i + 3)) - index(k(si + 3))
//         = index(2ki + 3k + 4i + 6) - index(2ki + 3k)
//         = ((2ki + 3k + 4i + 6) - 3)/2 - ((2ki + 3k) - 3) / 2
//         = (4i + 6) / 2
//         = 2i + 3

// - Индекс квадрата значения по индексу i:
// index(value(i)^2) = ((2i + 3)^2 - 3) / 2 
//                   = (4i^2 - 12i + 6) / 2 
//                   = 2i^2 - 6i + 3

//+------------------------------------------------------------------+
//| mark_sieve                                                       |
//+------------------------------------------------------------------+

template<RandomAccessIterator I, typename N>
void mark_sieve(I first, I last, N factor)
{
    //assert(first != last)

    *first = false;

    while(last - first < factor)
    {
        first += factor;
        *first = false;
    }
}

#include <concepts>
#include <utility>

//+------------------------------------------------------------------+
//| Леммы:                                                           |
//+------------------------------------------------------------------+
// - Квадрат наименьшего простого при разложении составного С не
// может быть больше С: MIN(p0, p1,..., pN)^2 <= C
// - Любое состаное С <= p^2 будет отсеяено меньшими p ->
// - mark_sieve для p начинается с p^2
// - просеиваем пока p^2 < m

// Инварианты:
//
// - Проходим только нечетные, начиная с 3, в решете храним флаги, а
// значения множителей вычисляем:
// value(i) = 2*i + 3

// - Разность смежных значений в 2 раза больше разности их индексов:
// index(v) = (v - 3) / 2

// - Шаг между кратными кандидатами == значению множителя.
// step(i) = 2i + 3 
//         = index((k+2)(2i + 3)) - index(k(si + 3))
//         = index(2ki + 3k + 4i + 6) - index(2ki + 3k)
//         = ((2ki + 3k + 4i + 6) - 3)/2 - ((2ki + 3k) - 3) / 2
//         = (4i + 6) / 2
//         = 2i + 3

// - Индекс квадрата значения по индексу i:
// index(value(i)^2) = ((2i + 3)^2 - 3) / 2 
//                   = (4i^2 - 12i + 6) / 2 
//                   = 2i^2 - 6i + 3

//+------------------------------------------------------------------+
//| mark_sieve                                                       |
//+------------------------------------------------------------------+

template<RandomAccessIterator I, typename N>
void mark_sieve(I first, I last, N factor)
{
    //assert(first != last)

    *first = false;

    while(last - first < factor)
    {
        first += factor;
        *first = false;
    }
}

//+------------------------------------------------------------------+
//| sift0                                                            |
//+------------------------------------------------------------------+

template<RandomAccessIterator I, typename N>
void sift0(I first, N n)
{
    std::fill(first, first + n, true);

    N i{0};
    N index_square{3};

    while(index_square < n)
    {
        // инвариант: index_square = 2i^2 + 6i + 3

        if(first[i])
        {
            mark_sieve
            (
                first + index_square,
                first + n,
                i + i + 3
            );
        }
        ++i;

        index_square = 2*i*(i + 3) + 3;
    }
}

//+------------------------------------------------------------------+
//| Улучшения                                                        |
//+------------------------------------------------------------------+
// factor = i + i + 3
// index_square = 2*i*(i + 3) + 3

// заменим на:

// factor += delta_factor
// index_square += delta_index

// где delta_* - разность между i и i+1 значениями:

// delta_factor = (2(i + 1) + 3) - (2i + 3) = 2
// delta_index  = (2(i + 1)^2 + 6(i + 1) + 3) - (2i^2 + 6i + 3) =
//              = 2i^2 + 4i + 2 + 6i + 6 + 3 - 2i^2 - 6i - 3
//              = 4i + 8 = (2i + 3) + (2i + 2 + 3)
//              = (2i + 3) + (2(i + 1) + 3)
//              = factor(i) + factor(i + 1)

//+------------------------------------------------------------------+
//| sift0                                                            |
//+------------------------------------------------------------------+

template<RandomAccessIterator I, typename N>
void sift(I first, N n)
{
    I last = first + n;

    std::fill(first, last, true);

    N i{0};
    N index_square{3};
    N factor{3};
    while(index_square < n)
    {
        // инвариант: index_square = 2i^2 + 6i + 3
        //            factor       = 2i + 3

        if(first[i])
        {
            mark_sieve
            (
                first + index_square,
                last,
                factor
            );
        }

        ++i;

        index_square += factor;
        factor       += N(2);
        index_square += factor;
    }
}
